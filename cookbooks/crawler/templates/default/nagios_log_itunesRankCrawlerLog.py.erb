#!/usr/bin/env python
# Copyright (c) 2010-2012 Nagios Enterprises, LLC.
# Written by: Scott Wilkerson (nagios@nagios.org)
import optparse, sys, urllib, cgi, os, sys, time, glob, re,socket,pycurl,cStringIO
from xml.dom.minidom  import parseString
from stat import S_ISREG, ST_CTIME, ST_MODE
from datetime import datetime
from datetime import timedelta


SERVICE ='itunesRankCrawlerLog'
LOG_DIR ="/mnt/local/wordster/mw/crawler/apple/rank_rt/{}/logs/"

LIST_OF_INSTANCE=["<%= @instance_1 %>", "<%= @instance_2 %>", "<%= @instance_3 %>", "<%= @instance_4 %>"]

NAGIOS_MESSAGE_POST_URL='http://nagios.wordsterbeta.com/nrdp/'
NAGIOS_MESSAGE_TOKKEN='wordster'
AMAZON_HOSTNAME_URL= 'http://169.254.169.254/latest/meta-data/public-hostname'
#AMAZON_HOSTNAME_URL=None


grepList=["Standby, initializing constants",
          "Rabit server shutting down",
          "no. of country codes",
          "no. of categories",
          "no. of sections",
          "found match route :rt_rank_crawler",
          "Udating last crawl time to cassandra"]


class send_nrdp:

  def __init__(self):
    self.options = {
        'url'       : NAGIOS_MESSAGE_POST_URL,
        'token'     : NAGIOS_MESSAGE_TOKKEN,
        'delim'     : "\t", 
        'checktype' : '1'
    }

  def sendToNagios(self, hostname, state, service, output):
    print "send to nagios [{}][{}]{} {} ".format(hostname, state,  output,service)
    if not self.options['delim']:
      self.options.delim = "\t"
    if not self.options['checktype']:
      self.options.checktype = "1"
    xml="<?xml version='1.0'?>\n<checkresults>\n"; 
    # it is possible this may not work on windows systems...
    print "send to nagios hostname"
    if hostname and state:   
      if service:
        xml += "<checkresult type='service' checktype='"+self.options['checktype']+"'>"
        xml += "<hostname>"+cgi.escape(hostname,True)+"</hostname>"
        xml += "<servicename>"+cgi.escape(service,True)+"</servicename>"
        xml += "<state>"+state+"</state>"
        xml += "<output>"+cgi.escape(output,True)+"</output>"
        xml += "</checkresult>"
      else:
        xml += "<checkresult type='host'  checktype='"+self.options['checktype']+"'>"
        xml += "<hostname>"+cgi.escape(hostname,True)+"</hostname>"
        xml += "<state>"+state+"</state>"
        xml += "<output>"+cgi.escape(output,True)+"</output>"
        xml += "</checkresult>"
      xml += "</checkresults>"
      print xml
      self.post_data(self.options['url'], self.options['token'], xml)

  def getText(self, nodelist):
    rc = []
    for node in nodelist:
      if node.nodeType == node.TEXT_NODE:
        rc.append(node.data)
    return ''.join(rc)

  def post_data(self, url, token, xml):
    params = urllib.urlencode({'token': token.strip(),'cmd': 'submitcheck', 'XMLDATA': xml});
    opener = urllib.FancyURLopener()
    try:
      f = opener.open(url, params)
      result = parseString(f.read())
    except Exception, e:
      print "Cannot connect to url."
      # TODO add directory option
      sys.exit(e)
      if self.getText(result.getElementsByTagName("status")[0].childNodes) == "0":
        sys.exit()
      else:
        print "ERROR - NRDP Returned: "+self.getText(result.getElementsByTagName("message")[0].childNodes)
        sys.exit(1)


def logError (fileName, output, startTime, service):
  send=send_nrdp()
  publicHostName = getMachinePublicHostName(AMAZON_HOSTNAME_URL)
  message = '[{}][{}][{}][{}][ERROR]{}'.format(publicHostName,socket.gethostname(),fileName, startTime, output)
  send.sendToNagios(publicHostName, "2", service, message)
   
def logInfo (fileName, output, startTime, service):
  send=send_nrdp()
  publicHostName = getMachinePublicHostName(AMAZON_HOSTNAME_URL)
  message = '[{}][{}][{}][{}][Info]{}'.format(publicHostName,socket.gethostname(),fileName,  startTime, output)
  send.sendToNagios(publicHostName, "0", service, message)
   

def generateFileFilter(late15MinutesTime):
  late15MinutesTime
  fileFilter= "itunesranker_"+late15MinutesTime.strftime("%d-%b-%y-%H:%M:")+"*"
  return fileFilter

def listFiles(directory,  filterStr):
  files = filter(os.path.isfile, glob.glob(directory + "//" +filterStr+"*"))
  file_date_tuple_list = []
  for x in files:
    d = os.path.getmtime(x)
    #tuple with file and date, add it in a list
    file_date_tuple = (x,d)
    file_date_tuple_list.append(file_date_tuple)
  #sort the tuple list by the second element which is the date
  file_date_tuple_list.sort(key=lambda x: x[1])
  print file_date_tuple_list
  return file_date_tuple_list

def parseFile(fileName, grepText): 
  print fileName
  f = open(fileName, 'r')
  result = {x: [] for x in grepText}
  for line in f:
    for grepStr in result.keys():
      if re.search(grepStr , line):
        result[grepStr].append(line)
  return result


def checkNumberOfRankMessageSent(fileName, parseResult, currentTime, instance):
  noOfCountry = int(parseResult["no. of country codes"][0][41:44].strip())
  noOfCategory= int(parseResult["no. of categories"][0][41:44].strip())
  noOfSection = int(parseResult["no. of sections"][0][41:44].strip())
  totalUrl = noOfCountry*noOfCategory*noOfSection
  totalRankMessageSent = len(parseResult["found match route :rt_rank_crawler"]) - len(parseResult["Udating last crawl time to cassandra"])
  output  = 'Country {}, Category {}, Section {}, url {} rank message {}'.format(noOfCountry, noOfCategory, noOfSection ,totalUrl ,totalRankMessageSent)
  if totalUrl == totalRankMessageSent :
    logInfo(fileName, output, currentTime, instance+'_itunesRankCrawlerLogMsg')
  else:
    logError(fileName, output, currentTime, instance+'_itunesRankCrawlerLogMsg')
  return output

def checkStartTime(fileName, late15MinutesTime, parseResult, currentTime, instance):
  minuteStartTime= late15MinutesTime.strftime(":%M:")
  if re.search(minuteStartTime, parseResult["Standby, initializing constants"][0]):
    logInfo(fileName, parseResult["Standby, initializing constants"][0], currentTime, instance+'_itunesRankCrawlerLogStart' )
  else:
    logError(fileName, parseResult["Standby, initializing constants"][0], currentTime,instance+ '_itunesRankCrawlerLogStart' )

def checkEndTime(fileName, late15MinutesTime, parseResult, currentTime, instance):
  if parseResult["Rabit server shutting down"]== None or len(parseResult["Rabit server shutting down"]) == 0:
     logError(fileName, "crawler did not finish", currentTime, "itunesRankCrawlerLogEnd")
     return
  minuteStartTime = int(late15MinutesTime.strftime("%M").strip())
  minuteEndTime = int((parseResult["Rabit server shutting down"][0][3:5]).strip())
  if minuteEndTime-minuteStartTime < 55 and  minuteEndTime-minuteStartTime >= 0  :
    logInfo(fileName, parseResult["Rabit server shutting down"][0], currentTime, instance+ '_itunesRankCrawlerLogEnd')
  else:
    logError(fileName, parseResult["Rabit server shutting down"][0], currentTime, instance+ "_itunesRankCrawlerLogEnd")
    

def getMachinePublicHostName(amazonUrl):
  if amazonUrl != None :
    buf = cStringIO.StringIO()
    c = pycurl.Curl()
    c.setopt(c.URL, AMAZON_HOSTNAME_URL)
    c.setopt(c.WRITEFUNCTION, buf.write)
    c.perform()
    publicHostname=  buf.getvalue()
    buf.close()
    return publicHostname
  else:
    return socket.gethostbyname(socket.getfqdn())



getMachinePublicHostName(AMAZON_HOSTNAME_URL)
currentTime = datetime.now()
late15MinutesTime =  currentTime- timedelta(hours=1)
fileFilter=  generateFileFilter(late15MinutesTime)
for instance in LIST_OF_INSTANCE:
  print LOG_DIR.format(instance)
  files = listFiles(LOG_DIR.format(instance), fileFilter)
  if files == None or len(files) == 0:
    logError(fileFilter, "job did not started", currentTime, instance+ '_itunesRankCrawlerLogStart')
  for fileName in files:
    parseResult = parseFile(fileName[0], grepList)
    checkNumberOfRankMessageSent(fileName[0], parseResult, currentTime, instance)
    checkStartTime(fileName[0], late15MinutesTime, parseResult, currentTime, instance) 
    checkEndTime(fileName[0], late15MinutesTime, parseResult, currentTime, instance)


#curl http://169.254.169.254/latest/meta-data/public-hostname

#if __name__ == "__main__":
#    send_nrdp().run()     




